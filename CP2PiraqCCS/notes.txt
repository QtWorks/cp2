04/22/03
Updated to revised^n proto.h.  This makes beam_num into beam_num_low and beam_num_high to give a 64 bit quantitiy. The version rdd020422.182 has the good code from before but with conversion to the 6701 libraries and all that for consistency, and with the new proto.h.  Running, the output still goes to hell after 256 gates, the same as before. 
This is the current memory allocation code:

/* Try using SBSRAM for Scratch */
    sbsram_seg = MEM_define((Ptr) 0x400000, 0x40000, 0);
//    Scratch = (int *)MEM_alloc(scratch_seg,4*MAXGATES*sizeof (int),0);
//	Scratch = (int *)MEM_alloc(SCRATCH_RAM,4*MAXGATES*sizeof (int),0);
	Scratch = (int *)malloc(4*MAXGATES*sizeof(int));
//   Scratch = (int *)malloc(4*MAXGATES*sizeof (int));
   
// Allocate buffers assuming floats and 1024 gates
	IQbuf = (float *)MEM_alloc(sbsram_seg, IQBUFLEN, 0);
//	ABPbuf = (float *)MEM_alloc(sbsram_seg, ABPBUFLEN, 0);
    	ABPbuf = (float *)malloc(ABPBUFLEN);
	CFDelay = (float *)MEM_alloc(sbsram_seg, CFDELAYLEN, 0);
// DEBUG    CFDelay = (float *)malloc(CFDELAYLEN);
	LAGbuf = (float *)malloc(LAGBUFLEN);

Trying the following with ABPbuf:
  	ABPbuf = (float *)MEM_alloc(sdram0_seg, ABPBUFLEN, 0);
Now it still runs at 256 gates, but absolutely quits at 258.

Going back to ABPbuf = malloc...

Trying
	IQbuf = (float *)malloc(IQBUFLEN);

Discovered that MAXGATES had been hacked down to 256 gates, which was the limit we saw.  Relieved that back to 512 gates and it will now apparently run 414 gates with no EOF light, although it will cycle at up to 668 gates.  Recall that this must be multiplied by 2 for 2 channels, so we are processing (sort of) 668*2 = 1336 gates, or 1,336,000 gates per second.  We have no EOF light at 828,000 gates/sec.  This is all with no clutter filter.  We'll now try some memory juggling.

Going back to 
	ABPbuf = (float *)MEM_alloc(sdram0_seg, ABPBUFLEN, 0);
now gives the same 414 gates beyond which the EOF light comes on and the data look bad.  Now, however, it quits cycling at 484 gates, rather than 668 gates.  It appears that we have two effects limiting the performance.  One limit is how fast and accurately the data can be read from the FIFO. The other is a fundamental memory limitation, perhaps even running off the end of a segment. 

Trying ABPbuf in SBSRAM:
	ABPbuf = (float *)MEM_alloc(sbsram_seg, ABPBUFLEN, 0);
This still turns on the EOF after 414, but cycles up to 550.

Back to ABPbuf in IDRAM using malloc.

This configuration:
    sbsram_seg = MEM_define((Ptr) 0x400000, 0x40000, 0);
    sdram0_seg = MEM_define((Ptr) 0x2000000, 0x1000000,0); // 16 MB of SDRAM
//	Scratch = (int *)MEM_alloc(sbsram_seg, 4*MAXGATES*sizeof(int), 0);
    Scratch = (int *)malloc(4*MAXGATES*sizeof (int));
   
// Allocate buffers assuming floats and MAXGATES gates
	IQbuf = (float *)MEM_alloc(sbsram_seg, IQBUFLEN, 0);	// 414/668 Original
//	IQbuf = (float *)malloc(IQBUFLEN);
//	ABPbuf = (float *)MEM_alloc(sbsram_seg, ABPBUFLEN, 0); 	// 414/550
 	ABPbuf = (float *)malloc(ABPBUFLEN); 					// 414/668 Original
// 	ABPbuf = (float *)MEM_alloc(sdram0_seg, ABPBUFLEN, 0); 	// 414/484 

	CFDelay = (float *)MEM_alloc(sbsram_seg, CFDELAYLEN, 0);
//  CFDelay = (float *)malloc(CFDELAYLEN);
//	LAGbuf = (float *)malloc(LAGBUFLEN);					//414/668 Original
	LAGbuf = (float *)MEM_alloc(sbsram_seg, LAGBUFLEN, 0); 	//414/628 OK
//  LAGbuf = (float *)MEM_alloc(sdram0_seg, LAGBUFLEN, 0);	//414(shaky)/440 or so

gives 414/468.  Hmmmmm.
Trying 
	IQbuf = (float *)MEM_alloc(sbsram_seg, IQBUFLEN, 0);
Again, EOF comes on at 414 gates, but it cycles to 632 gates.  Back to malloc for IQbuf.

Trying	
	Scratch = (int *)MEM_alloc(sbsram_seg, 4*MAXGATES*sizeof(int),0);
Number of gates drops to 326 before EOF light.  Will cycle to 608.  Back to malloc for Scratch.

Trying moving LAGbuf from malloc to MEM_alloc(sbsram_seg,...)
	LAGbuf = (float *)MEM_alloc(sbsram_seg, LAGBUFLEN, 0);
Still get 414 before EOF, but 628 before cycling quits.  What does it all mean? Probably going to leave the lagbuf in SBSRAM as it doesn't make much difference whether it's there or in internal RAM.  Back to malloc for now.

Trying
	LAGbuf = (float *)MEM_alloc(sdram0_seg, LAGBUFLEN, 0);
Bad.

This seems to be the best memory config to date:
    sbsram_seg = MEM_define((Ptr) 0x400000, 0x40000, 0);
    sdram0_seg = MEM_define((Ptr) 0x2000000, 0x1000000,0); // 16 MB of SDRAM
//	Scratch = (int *)MEM_alloc(sbsram_seg, 4*MAXGATES*sizeof(int), 0);
    Scratch = (int *)malloc(4*MAXGATES*sizeof (int));
   
// Allocate buffers assuming floats and MAXGATES gates
	IQbuf = (float *)MEM_alloc(sbsram_seg, IQBUFLEN, 0);	// 414/668 Original
//	IQbuf = (float *)malloc(IQBUFLEN);
//	ABPbuf = (float *)MEM_alloc(sbsram_seg, ABPBUFLEN, 0); 	// 414/550
 	ABPbuf = (float *)malloc(ABPBUFLEN); 					// 414/668 Original
// 	ABPbuf = (float *)MEM_alloc(sdram0_seg, ABPBUFLEN, 0); 	// 414/484 

	CFDelay = (float *)MEM_alloc(sbsram_seg, CFDELAYLEN, 0);
//  CFDelay = (float *)malloc(CFDELAYLEN);
	LAGbuf = (float *)malloc(LAGBUFLEN);					//414/668 Original
//	LAGbuf = (float *)MEM_alloc(sbsram_seg, LAGBUFLEN, 0); 	//414/628 OK
//  LAGbuf = (float *)MEM_alloc(sdram0_seg, LAGBUFLEN, 0);	//414(shaky)/440 or so

and gives 414/632.  Can't seem to recreate the 414/668, but the 668 was bogus anyhow.  414 is now the most gates which will run with the EOF light off.

4/26/03
Integrating the system.  With all three boards inserted and running off the timer card, they don't always flash led0 in sync.  This seems to be exacerbated when running the PMAC.  Mitch has indicated that when running slaved to the timer as we are, the timingmode has no effect.  All four jumpers near the timer daisychain cable should be out on the piraqs and in on the timer card.  EUREKA!  There is another piece of code in data_xfer_loop in Rapidow_D.c which toggles led0.  I took this out and we now seem to run in sync.

The saved versionin file RapiDOW_D30426_1500.gud has antenna correction, clutter filter code available but of doubtful virtue, and the LED problem fixed.

4/27/03
Tried some loop unrolling.  In the PRF algorithm I duplicated the instructions in the main computational loop 7 more times and divide the loop parameter by 8 to reduce the effect of the loop overhead.  It helped.  It will now run 2500 PRF and 216 gates fairly reliably.  It tends to crash at 224 but after a long time.  There is a periodic glitch (bad beam) as observed on ASCOPE and this is probably related to the FIFO wrap problem Milan noted.  OK, we're now running (with rddlongloop08.out)200 gates at 3000 PRF.  