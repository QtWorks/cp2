////////////////////////////////////////////
// Params.cc
//
// TDRP C++ code file for class 'Params'.
//
// Code for program TsArchive2Dsr
//
// This file has been automatically
// generated by TDRP, do not modify.
//
/////////////////////////////////////////////

using namespace std;

#include "Params.hh"
#include <string.h>

  ////////////////////////////////////////////
  // Default constructor
  //

  Params::Params()

  {

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // initialize table

    _init();

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Copy constructor
  //

  Params::Params(const Params& source)

  {

    // sync the source object

    source.sync();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // class name

    _className = "Params";

    // copy table

    tdrpCopyTable((TDRPtable *) source._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = false;

  }

  ////////////////////////////////////////////
  // Destructor
  //

  Params::~Params()

  {

    // free up

    freeAll();

  }

  ////////////////////////////////////////////
  // Assignment
  //

  void Params::operator=(const Params& other)

  {

    // sync the other object

    other.sync();

    // free up any existing memory

    freeAll();

    // zero out table

    memset(_table, 0, sizeof(_table));

    // zero out members

    memset(&_start_, 0, &_end_ - &_start_);

    // copy table

    tdrpCopyTable((TDRPtable *) other._table, _table);

    // set members

    tdrpTable2User(_table, &_start_);

    _exitDeferred = other._exitDeferred;

  }

  ////////////////////////////////////////////
  // loadFromArgs()
  //
  // Loads up TDRP using the command line args.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char **params_path_p:
  //     If this is non-NULL, it is set to point to the path
  //     of the params file used.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromArgs(int argc, char **argv,
                           char **override_list,
                           char **params_path_p,
                           bool defer_exit)
  {
    int exit_deferred;
    if (_tdrpLoadFromArgs(argc, argv,
                          _table, &_start_,
                          override_list, params_path_p,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadApplyArgs()
  //
  // Loads up TDRP using the params path passed in, and applies
  // the command line args for printing and checking.
  //
  // Check usage() for command line actions associated with
  // this function.
  //
  //   char *param_file_path: the parameter file to be read in
  //
  //   argc, argv: command line args
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   bool defer_exit: normally, if the command args contain a 
  //      print or check request, this function will call exit().
  //      If defer_exit is set, such an exit is deferred and the
  //      private member _exitDeferred is set.
  //      Use exidDeferred() to test this flag.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadApplyArgs(const char *params_path,
                            int argc, char **argv,
                            char **override_list,
                            bool defer_exit)
  {
    int exit_deferred;
    if (tdrpLoadApplyArgs(params_path, argc, argv,
                          _table, &_start_,
                          override_list,
                          _className,
                          defer_exit, &exit_deferred)) {
      return (-1);
    } else {
      if (exit_deferred) {
        _exitDeferred = true;
      }
      return (0);
    }
  }

  ////////////////////////////////////////////
  // isArgValid()
  // 
  // Check if a command line arg is a valid TDRP arg.
  //

  bool Params::isArgValid(const char *arg)
  {
    return (tdrpIsArgValid(arg));
  }

  ////////////////////////////////////////////
  // load()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to load
  // up more than one class for a single application. It is a
  // lower-level routine than loadFromArgs, and hence more
  // flexible, but the programmer must do more work.
  //
  //   char *param_file_path: the parameter file to be read in.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::load(char *param_file_path,
                   char **override_list,
                   int expand_env, int debug)
  {
    if (tdrpLoad(param_file_path,
                 _table, &_start_,
                 override_list,
                 expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadFromBuf()
  //
  // Loads up TDRP for a given class.
  //
  // This version of load gives the programmer the option to
  // load up more than one module for a single application,
  // using buffers which have been read from a specified source.
  //
  //   char *param_source_str: a string which describes the
  //     source of the parameter information. It is used for
  //     error reporting only.
  //
  //   char **override_list: A null-terminated list of overrides
  //     to the parameter file.
  //     An override string has exactly the format of an entry
  //     in the parameter file itself.
  //
  //   char *inbuf: the input buffer
  //
  //   int inlen: length of the input buffer
  //
  //   int start_line_num: the line number in the source which
  //     corresponds to the start of the buffer.
  //
  //   expand_env: flag to control environment variable
  //               expansion during tokenization.
  //               If TRUE, environment expansion is set on.
  //               If FALSE, environment expansion is set off.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadFromBuf(char *param_source_str,
                          char **override_list,
                          char *inbuf, int inlen,
                          int start_line_num,
                          int expand_env, int debug)
  {
    if (tdrpLoadFromBuf(param_source_str,
                        _table, &_start_,
                        override_list,
                        inbuf, inlen, start_line_num,
                        expand_env, debug)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // loadDefaults()
  //
  // Loads up default params for a given class.
  //
  // See load() for more detailed info.
  //
  //  Returns 0 on success, -1 on failure.
  //

  int Params::loadDefaults(int expand_env)
  {
    if (tdrpLoad(NULL,
                 _table, &_start_,
                 NULL, expand_env, FALSE)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // sync()
  //
  // Syncs the user struct data back into the parameter table,
  // in preparation for printing.
  //
  // This function alters the table in a consistent manner.
  // Therefore it can be regarded as const.
  //

  void Params::sync(void) const
  {
    tdrpUser2Table(_table, (char *) &_start_);
  }

  ////////////////////////////////////////////
  // print()
  // 
  // Print params file
  //
  // The modes supported are:
  //
  //   PRINT_SHORT:   main comments only, no help or descriptions
  //                  structs and arrays on a single line
  //   PRINT_NORM:    short + descriptions and help
  //   PRINT_LONG:    norm  + arrays and structs expanded
  //   PRINT_VERBOSE: long  + private params included
  //

  void Params::print(FILE *out, tdrp_print_mode_t mode)
  {
    tdrpPrint(out, _table, _className, mode);
  }

  ////////////////////////////////////////////
  // checkAllSet()
  //
  // Return TRUE if all set, FALSE if not.
  //
  // If out is non-NULL, prints out warning messages for those
  // parameters which are not set.
  //

  int Params::checkAllSet(FILE *out)
  {
    return (tdrpCheckAllSet(out, _table, &_start_));
  }

  //////////////////////////////////////////////////////////////
  // checkIsSet()
  //
  // Return TRUE if parameter is set, FALSE if not.
  //
  //

  int Params::checkIsSet(char *paramName)
  {
    return (tdrpCheckIsSet(paramName, _table, &_start_));
  }

  ////////////////////////////////////////////
  // freeAll()
  //
  // Frees up all TDRP dynamic memory.
  //

  void Params::freeAll(void)
  {
    tdrpFreeAll(_table, &_start_);
  }

  ////////////////////////////////////////////
  // usage()
  //
  // Prints out usage message for TDRP args as passed
  // in to loadFromArgs().
  //

  void Params::usage(ostream &out)
  {
    out << "TDRP args: [options as below]\n"
        << "   [ -params path ] specify params file path\n"
        << "   [ -check_params] check which params are not set\n"
        << "   [ -print_params [mode]] print parameters\n"
        << "     using following modes, default mode is 'norm'\n"
        << "       short:   main comments only, no help or descr\n"
        << "                structs and arrays on a single line\n"
        << "       norm:    short + descriptions and help\n"
        << "       long:    norm  + arrays and structs expanded\n"
        << "       verbose: long  + private params included\n"
        << "       short_expand:   short with env vars expanded\n"
        << "       norm_expand:    norm with env vars expanded\n"
        << "       long_expand:    long with env vars expanded\n"
        << "       verbose_expand: verbose with env vars expanded\n"
        << "   [ -tdrp_debug] debugging prints for tdrp\n"
        << "   [ -tdrp_usage] print this usage\n";
  }

  ////////////////////////////////////////////
  // arrayRealloc()
  //
  // Realloc 1D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::arrayRealloc(char *param_name, int new_array_n)
  {
    if (tdrpArrayRealloc(_table, &_start_,
                         param_name, new_array_n)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // array2DRealloc()
  //
  // Realloc 2D array.
  //
  // If size is increased, the values from the last array 
  // entry is copied into the new space.
  //
  // Returns 0 on success, -1 on error.
  //

  int Params::array2DRealloc(char *param_name,
                             int new_array_n1,
                             int new_array_n2)
  {
    if (tdrpArray2DRealloc(_table, &_start_, param_name,
                           new_array_n1, new_array_n2)) {
      return (-1);
    } else {
      return (0);
    }
  }

  ////////////////////////////////////////////
  // _init()
  //
  // Class table initialization function.
  //
  //

  void Params::_init()

  {

    TDRPtable *tt = _table;

    // Parameter 'Comment 0'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 0");
    tt->comment_hdr = tdrpStrDup("TsArchive2Dsr reads raw time-series data in TsArchive format, computes the moments and writes the contents into a DsRadar FMQ.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'Comment 1'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 1");
    tt->comment_hdr = tdrpStrDup("DEBUGGING AND PROCESS CONTROL.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'debug'
    // ctype is '_debug_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("debug");
    tt->descr = tdrpStrDup("Debug option");
    tt->help = tdrpStrDup("If set, debug messages will be printed appropriately");
    tt->val_offset = (char *) &debug - &_start_;
    tt->enum_def.name = tdrpStrDup("debug_t");
    tt->enum_def.nfields = 4;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("DEBUG_OFF");
      tt->enum_def.fields[0].val = DEBUG_OFF;
      tt->enum_def.fields[1].name = tdrpStrDup("DEBUG_NORM");
      tt->enum_def.fields[1].val = DEBUG_NORM;
      tt->enum_def.fields[2].name = tdrpStrDup("DEBUG_VERBOSE");
      tt->enum_def.fields[2].val = DEBUG_VERBOSE;
      tt->enum_def.fields[3].name = tdrpStrDup("DEBUG_EXTRA_VERBOSE");
      tt->enum_def.fields[3].val = DEBUG_EXTRA_VERBOSE;
    tt->single_val.e = DEBUG_OFF;
    tt++;
    
    // Parameter 'instance'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("instance");
    tt->descr = tdrpStrDup("Process instance");
    tt->help = tdrpStrDup("Used for registration with procmap.");
    tt->val_offset = (char *) &instance - &_start_;
    tt->single_val.s = tdrpStrDup("test");
    tt++;
    
    // Parameter 'Comment 2'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 2");
    tt->comment_hdr = tdrpStrDup("MODE OF OPERATION.");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'mode'
    // ctype is '_mode_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("mode");
    tt->descr = tdrpStrDup("Operating mode");
    tt->help = tdrpStrDup("In REALTIME mode, the program waits for a new input file. In ARCHIVE mode, it moves through the list of file names specified on the command line. In SIMULATE mode, the program moves repeatedly through the file list, creating output files with times set to now. This is useful for simulating an operational radar.");
    tt->val_offset = (char *) &mode - &_start_;
    tt->enum_def.name = tdrpStrDup("mode_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("ARCHIVE");
      tt->enum_def.fields[0].val = ARCHIVE;
      tt->enum_def.fields[1].name = tdrpStrDup("REALTIME");
      tt->enum_def.fields[1].val = REALTIME;
      tt->enum_def.fields[2].name = tdrpStrDup("SIMULATE");
      tt->enum_def.fields[2].val = SIMULATE;
    tt->single_val.e = ARCHIVE;
    tt++;
    
    // Parameter 'Comment 3'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 3");
    tt->comment_hdr = tdrpStrDup("TIME-SERIES FILE DATA INPUT");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'input_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("input_dir");
    tt->descr = tdrpStrDup("Dir for input data files.");
    tt->help = tdrpStrDup("This is used in REALTIME mode only. In ARCHIVE and SIMULATE modes, the file paths are specified on the command line.");
    tt->val_offset = (char *) &input_dir - &_start_;
    tt->single_val.s = tdrpStrDup("./input");
    tt++;
    
    // Parameter 'use_ldata_info_file'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_ldata_info_file");
    tt->descr = tdrpStrDup("Option to use _latest_data_info file as input trigger.");
    tt->help = tdrpStrDup("REALTIME mode only. If true, waits on _latest_data_info file. If false, scans the directory for new file.");
    tt->val_offset = (char *) &use_ldata_info_file - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'max_realtime_valid_age'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("max_realtime_valid_age");
    tt->descr = tdrpStrDup("Max valid age of rdata input files in realtime mode (secs)");
    tt->help = tdrpStrDup("This the max valid age for an incoming file. The program will wait for a data file more recent than this age.");
    tt->val_offset = (char *) &max_realtime_valid_age - &_start_;
    tt->has_min = TRUE;
    tt->min_val.i = 1;
    tt->single_val.i = 360;
    tt++;
    
    // Parameter 'invert_hv_flag'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("invert_hv_flag");
    tt->descr = tdrpStrDup("Option to invert the sense of the HV flag in alternating mode.");
    tt->help = tdrpStrDup("In alternating dual-pol mode, the HV flag indicates whether the pulse is horizontally or vertically polarized. Normally 1 indicates H and 0 V. This parameter allows you to invert the sense of the flag, so that 1 is interpreted as V and 0 as H.");
    tt->val_offset = (char *) &invert_hv_flag - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 4'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 4");
    tt->comment_hdr = tdrpStrDup("RADAR PARAMETERS");
    tt->comment_text = tdrpStrDup("If any of the params are set in the input data files, the values in those params will be taken from the input data stream rather than from the parameter file.");
    tt++;
    
    // Parameter 'radar'
    // ctype is '_radar_params_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("radar");
    tt->descr = tdrpStrDup("Default radar params. If any of the params are set in the input data files, the values in those params will be taken from the input data stream rather than from the parameter file.");
    tt->help = tdrpStrDup("========== Radar params ==========\n\t\naltitude: km\nlatitude: degrees\nlongitude: degrees\nhoriz_beam_width: half-power beam width - degrees\nvert_beam_width: half-power beam width - degrees\nradar_constant: dB\nxmit_peak_pwr: watts\nreceiver_mds: dBm\nreceiver_gain: dB\nantenna_gain: dB\nsystem_gain: dB\n\t\n");
    tt->val_offset = (char *) &radar - &_start_;
    tt->struct_def.name = tdrpStrDup("radar_params_t");
    tt->struct_def.nfields = 11;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("altitude");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &radar.altitude - (char *) &radar;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("latitude");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &radar.latitude - (char *) &radar;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("longitude");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &radar.longitude - (char *) &radar;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("horiz_beam_width");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &radar.horiz_beam_width - (char *) &radar;
      tt->struct_def.fields[4].ftype = tdrpStrDup("double");
      tt->struct_def.fields[4].fname = tdrpStrDup("vert_beam_width");
      tt->struct_def.fields[4].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &radar.vert_beam_width - (char *) &radar;
      tt->struct_def.fields[5].ftype = tdrpStrDup("double");
      tt->struct_def.fields[5].fname = tdrpStrDup("radar_constant");
      tt->struct_def.fields[5].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &radar.radar_constant - (char *) &radar;
      tt->struct_def.fields[6].ftype = tdrpStrDup("double");
      tt->struct_def.fields[6].fname = tdrpStrDup("xmit_peak_pwr");
      tt->struct_def.fields[6].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &radar.xmit_peak_pwr - (char *) &radar;
      tt->struct_def.fields[7].ftype = tdrpStrDup("double");
      tt->struct_def.fields[7].fname = tdrpStrDup("receiver_mds");
      tt->struct_def.fields[7].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &radar.receiver_mds - (char *) &radar;
      tt->struct_def.fields[8].ftype = tdrpStrDup("double");
      tt->struct_def.fields[8].fname = tdrpStrDup("receiver_gain");
      tt->struct_def.fields[8].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &radar.receiver_gain - (char *) &radar;
      tt->struct_def.fields[9].ftype = tdrpStrDup("double");
      tt->struct_def.fields[9].fname = tdrpStrDup("antenna_gain");
      tt->struct_def.fields[9].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[9].rel_offset = 
        (char *) &radar.antenna_gain - (char *) &radar;
      tt->struct_def.fields[10].ftype = tdrpStrDup("double");
      tt->struct_def.fields[10].fname = tdrpStrDup("system_gain");
      tt->struct_def.fields[10].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[10].rel_offset = 
        (char *) &radar.system_gain - (char *) &radar;
    tt->n_struct_vals = 11;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 1.742;
      tt->struct_vals[1].d = 39.9321;
      tt->struct_vals[2].d = -105.182;
      tt->struct_vals[3].d = 0.91;
      tt->struct_vals[4].d = 0.91;
      tt->struct_vals[5].d = 70.1652;
      tt->struct_vals[6].d = 8e+06;
      tt->struct_vals[7].d = -113;
      tt->struct_vals[8].d = 46.05;
      tt->struct_vals[9].d = 45.2;
      tt->struct_vals[10].d = 46.05;
    tt++;
    
    // Parameter 'scan_type_id'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("scan_type_id");
    tt->descr = tdrpStrDup("Scan type id");
    tt->help = tdrpStrDup("Unique identifier for scan strategy");
    tt->val_offset = (char *) &scan_type_id - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'scan_type_name'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("scan_type_name");
    tt->descr = tdrpStrDup("Scan type name");
    tt->help = tdrpStrDup("Descriptive name for scan strategy");
    tt->val_offset = (char *) &scan_type_name - &_start_;
    tt->single_val.s = tdrpStrDup("Default");
    tt++;
    
    // Parameter 'atmos_attenuation'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("atmos_attenuation");
    tt->descr = tdrpStrDup("Atmospheric attenuation (dB/km).");
    tt->help = tdrpStrDup("Reflectivity is corrected for this.");
    tt->val_offset = (char *) &atmos_attenuation - &_start_;
    tt->single_val.d = 0.012;
    tt++;
    
    // Parameter 'dbz_calib_correction'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("dbz_calib_correction");
    tt->descr = tdrpStrDup("Correction to DBZ calibration.");
    tt->help = tdrpStrDup("DBZ values are corrected by this amount. Used in cases in which the reflectivity calibration values provided in the time series appears to be in error.");
    tt->val_offset = (char *) &dbz_calib_correction - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'Comment 5'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 5");
    tt->comment_hdr = tdrpStrDup("RADAR CALIBRATION");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'override_ts_cal'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("override_ts_cal");
    tt->descr = tdrpStrDup("Option to override cal in time series data.");
    tt->help = tdrpStrDup("If false, the cal information in the time series data will be used. If true, the cal info in the param file will be used.");
    tt->val_offset = (char *) &override_ts_cal - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'hc_receiver'
    // ctype is '_receiver_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("hc_receiver");
    tt->descr = tdrpStrDup("Properties of horiz co-polar receiver.");
    tt->help = tdrpStrDup("noise_db: the blue-sky noise measured at the ifd, in dBm. gain: the gain from the measurement plane to the ifd, in dB.");
    tt->val_offset = (char *) &hc_receiver - &_start_;
    tt->struct_def.name = tdrpStrDup("receiver_t");
    tt->struct_def.nfields = 3;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("noise_db");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &hc_receiver.noise_db - (char *) &hc_receiver;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("gain");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &hc_receiver.gain - (char *) &hc_receiver;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("radar_constant");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &hc_receiver.radar_constant - (char *) &hc_receiver;
    tt->n_struct_vals = 3;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = -77.1736;
      tt->struct_vals[1].d = 37.1712;
      tt->struct_vals[2].d = -68.1627;
    tt++;
    
    // Parameter 'hx_receiver'
    // ctype is '_receiver_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("hx_receiver");
    tt->descr = tdrpStrDup("Properties of horiz cross-polar receiver.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &hx_receiver - &_start_;
    tt->struct_def.name = tdrpStrDup("receiver_t");
    tt->struct_def.nfields = 3;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("noise_db");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &hx_receiver.noise_db - (char *) &hx_receiver;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("gain");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &hx_receiver.gain - (char *) &hx_receiver;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("radar_constant");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &hx_receiver.radar_constant - (char *) &hx_receiver;
    tt->n_struct_vals = 3;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = -77.8509;
      tt->struct_vals[1].d = 37.0979;
      tt->struct_vals[2].d = -68.3172;
    tt++;
    
    // Parameter 'vc_receiver'
    // ctype is '_receiver_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("vc_receiver");
    tt->descr = tdrpStrDup("Properties of vertical co-polar receiver.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &vc_receiver - &_start_;
    tt->struct_def.name = tdrpStrDup("receiver_t");
    tt->struct_def.nfields = 3;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("noise_db");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &vc_receiver.noise_db - (char *) &vc_receiver;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("gain");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &vc_receiver.gain - (char *) &vc_receiver;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("radar_constant");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &vc_receiver.radar_constant - (char *) &vc_receiver;
    tt->n_struct_vals = 3;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = -77.4253;
      tt->struct_vals[1].d = 37.4876;
      tt->struct_vals[2].d = -68.3172;
    tt++;
    
    // Parameter 'vx_receiver'
    // ctype is '_receiver_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("vx_receiver");
    tt->descr = tdrpStrDup("Properties of vertical cross-polar receiver.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &vx_receiver - &_start_;
    tt->struct_def.name = tdrpStrDup("receiver_t");
    tt->struct_def.nfields = 3;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("noise_db");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &vx_receiver.noise_db - (char *) &vx_receiver;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("gain");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &vx_receiver.gain - (char *) &vx_receiver;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("radar_constant");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &vx_receiver.radar_constant - (char *) &vx_receiver;
    tt->n_struct_vals = 3;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = -78.1237;
      tt->struct_vals[1].d = 37.4225;
      tt->struct_vals[2].d = -68.1627;
    tt++;
    
    // Parameter 'Comment 6'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 6");
    tt->comment_hdr = tdrpStrDup("MOMENTS COMPUTATIONS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'index_beams_in_azimuth'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("index_beams_in_azimuth");
    tt->descr = tdrpStrDup("Option to index the beams to azimuth.");
    tt->help = tdrpStrDup("If true, moments are computed for IQ series centered around azimuths at a specified spacing.");
    tt->val_offset = (char *) &index_beams_in_azimuth - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'azimuth_resolution'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("azimuth_resolution");
    tt->descr = tdrpStrDup("Resolution in azimuth for beam indexing.");
    tt->help = tdrpStrDup("See index_beams_in_azimuth. This is the azimuth resolution for computing the location at which to compute the moments. The azimuths always start at 0.0 and increase at this resolution.");
    tt->val_offset = (char *) &azimuth_resolution - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->min_val.d = 0.001;
    tt->max_val.d = 360;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'H2V_phase_differential'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("H2V_phase_differential");
    tt->descr = tdrpStrDup("Phase differential between H and V receiving circuits (deg).");
    tt->help = tdrpStrDup("For dual pol operation only. Used to normalize phidp around 0.");
    tt->val_offset = (char *) &H2V_phase_differential - &_start_;
    tt->single_val.d = 175;
    tt++;
    
    // Parameter 'moments_params'
    // ctype is '_moments_params_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("moments_params");
    tt->descr = tdrpStrDup("Algorithm geometry - based on PRF.");
    tt->help = tdrpStrDup("Sets the moments algorithm parameters based on PRF. This is a temporary solution until this information is available directly from the data. UNITS: pulse width: microsecs. The algorithm indicates whether Pulse-Pair or FFT method should be used. The window is applied upstream of the moments computation. For SZ, no window should be used upstream. apply_sz indicates whether to apply SZ decoding. n_samples is the number of samples to be used for computing moments. If apply_sz is true, this will be forced to 64.");
    tt->array_offset = (char *) &_moments_params - &_start_;
    tt->array_n_offset = (char *) &moments_params_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(moments_params_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("moments_params_t");
    tt->struct_def.nfields = 8;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("lower_prf");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_moments_params->lower_prf - (char *) _moments_params;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("upper_prf");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_moments_params->upper_prf - (char *) _moments_params;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("pulse_width");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &_moments_params->pulse_width - (char *) _moments_params;
      tt->struct_def.fields[3].ftype = tdrpStrDup("algorithm_t");
      tt->struct_def.fields[3].fname = tdrpStrDup("algorithm");
      tt->struct_def.fields[3].ptype = ENUM_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &_moments_params->algorithm - (char *) _moments_params;
        tt->struct_def.fields[3].enum_def.name = tdrpStrDup("algorithm_t");
        tt->struct_def.fields[3].enum_def.nfields = 2;
        tt->struct_def.fields[3].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[3].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[3].enum_def.fields[0].name = tdrpStrDup("ALG_PP");
        tt->struct_def.fields[3].enum_def.fields[0].val = ALG_PP;
        tt->struct_def.fields[3].enum_def.fields[1].name = tdrpStrDup("ALG_FFT");
        tt->struct_def.fields[3].enum_def.fields[1].val = ALG_FFT;
      tt->struct_def.fields[4].ftype = tdrpStrDup("fft_window_t");
      tt->struct_def.fields[4].fname = tdrpStrDup("window");
      tt->struct_def.fields[4].ptype = ENUM_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &_moments_params->window - (char *) _moments_params;
        tt->struct_def.fields[4].enum_def.name = tdrpStrDup("fft_window_t");
        tt->struct_def.fields[4].enum_def.nfields = 3;
        tt->struct_def.fields[4].enum_def.fields = (enum_field_t *) tdrpMalloc
          (tt->struct_def.fields[4].enum_def.nfields * sizeof(enum_field_t));
        tt->struct_def.fields[4].enum_def.fields[0].name = tdrpStrDup("WINDOW_HANNING");
        tt->struct_def.fields[4].enum_def.fields[0].val = WINDOW_HANNING;
        tt->struct_def.fields[4].enum_def.fields[1].name = tdrpStrDup("WINDOW_BLACKMAN");
        tt->struct_def.fields[4].enum_def.fields[1].val = WINDOW_BLACKMAN;
        tt->struct_def.fields[4].enum_def.fields[2].name = tdrpStrDup("WINDOW_NONE");
        tt->struct_def.fields[4].enum_def.fields[2].val = WINDOW_NONE;
      tt->struct_def.fields[5].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[5].fname = tdrpStrDup("apply_sz");
      tt->struct_def.fields[5].ptype = BOOL_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &_moments_params->apply_sz - (char *) _moments_params;
      tt->struct_def.fields[6].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[6].fname = tdrpStrDup("dual_pol");
      tt->struct_def.fields[6].ptype = BOOL_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &_moments_params->dual_pol - (char *) _moments_params;
      tt->struct_def.fields[7].ftype = tdrpStrDup("int");
      tt->struct_def.fields[7].fname = tdrpStrDup("n_samples");
      tt->struct_def.fields[7].ptype = INT_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &_moments_params->n_samples - (char *) _moments_params;
    tt->n_struct_vals = 16;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0;
      tt->struct_vals[1].d = 500;
      tt->struct_vals[2].d = 1;
      tt->struct_vals[3].e = ALG_FFT;
      tt->struct_vals[4].e = WINDOW_BLACKMAN;
      tt->struct_vals[5].b = pFALSE;
      tt->struct_vals[6].b = pFALSE;
      tt->struct_vals[7].i = 32;
      tt->struct_vals[8].d = 500;
      tt->struct_vals[9].d = 2000;
      tt->struct_vals[10].d = 1;
      tt->struct_vals[11].e = ALG_FFT;
      tt->struct_vals[12].e = WINDOW_HANNING;
      tt->struct_vals[13].b = pTRUE;
      tt->struct_vals[14].b = pFALSE;
      tt->struct_vals[15].i = 64;
    tt++;
    
    // Parameter 'moments_snr_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("moments_snr_threshold");
    tt->descr = tdrpStrDup("Signal-to-noise value for thresholding (dB).");
    tt->help = tdrpStrDup("This is the signal-to-noise ratio used to thresholding based on the noise.");
    tt->val_offset = (char *) &moments_snr_threshold - &_start_;
    tt->single_val.d = 3;
    tt++;
    
    // Parameter 'Comment 7'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 7");
    tt->comment_hdr = tdrpStrDup("REFRACTIVITY FIELDS");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'change_aiq_sign'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("change_aiq_sign");
    tt->descr = tdrpStrDup("Option to change sign on AIQ field.");
    tt->help = tdrpStrDup("This affects refractt variables. Set to true to change the sign of the computed AIQ field.");
    tt->val_offset = (char *) &change_aiq_sign - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 8'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 8");
    tt->comment_hdr = tdrpStrDup("SZ8-64 PHASE CODING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'negate_phase_codes'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("negate_phase_codes");
    tt->descr = tdrpStrDup("Option to multiple phase codes by -1.");
    tt->help = tdrpStrDup("In some data sets the phase codes are negated. Set this to true for such data cases.");
    tt->val_offset = (char *) &negate_phase_codes - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'sz_strong_to_weak_power_ratio_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("sz_strong_to_weak_power_ratio_threshold");
    tt->descr = tdrpStrDup("Strong-to-weak power ratio censoring threshold (dB).");
    tt->help = tdrpStrDup("SZ decoding only. If the strong to weak trip power ratio is greater than this, we censor the weak trip.");
    tt->val_offset = (char *) &sz_strong_to_weak_power_ratio_threshold - &_start_;
    tt->single_val.d = 50;
    tt++;
    
    // Parameter 'sz_out_of_trip_power_ratio_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("sz_out_of_trip_power_ratio_threshold");
    tt->descr = tdrpStrDup("Ratio of peak power to off-peak replica power (dB).");
    tt->help = tdrpStrDup("SZ decoding only. When checking for out-of-trip power after deconvolution, this is the threshold to be used. The power of the spectral peak is compared with the peak for the 6 lowest replicas. If the ratio is less that this for a given number of replicas, it is assumed that out-of-trip power is present. See 'sz_out_of_trip_power_n_replicas'.");
    tt->val_offset = (char *) &sz_out_of_trip_power_ratio_threshold - &_start_;
    tt->single_val.d = 6;
    tt++;
    
    // Parameter 'sz_out_of_trip_power_n_replicas'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("sz_out_of_trip_power_n_replicas");
    tt->descr = tdrpStrDup("Number of replicas used for checking for out-of-trip power.");
    tt->help = tdrpStrDup("SZ decoding only. When checking for out-of-trip power after deconvolution, this is the number of peaks to check. See 'sz_out_of_trip_power_ratio_threshold'.");
    tt->val_offset = (char *) &sz_out_of_trip_power_n_replicas - &_start_;
    tt->has_min = TRUE;
    tt->has_max = TRUE;
    tt->min_val.i = 1;
    tt->max_val.i = 6;
    tt->single_val.i = 3;
    tt++;
    
    // Parameter 'sz_window'
    // ctype is '_sz_window_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = ENUM_TYPE;
    tt->param_name = tdrpStrDup("sz_window");
    tt->descr = tdrpStrDup("Window type for SZ864.");
    tt->help = tdrpStrDup("Window type to be applied to strong trip before computing spectra.");
    tt->val_offset = (char *) &sz_window - &_start_;
    tt->enum_def.name = tdrpStrDup("sz_window_t");
    tt->enum_def.nfields = 3;
    tt->enum_def.fields = (enum_field_t *)
        tdrpMalloc(tt->enum_def.nfields * sizeof(enum_field_t));
      tt->enum_def.fields[0].name = tdrpStrDup("NO_WINDOW");
      tt->enum_def.fields[0].val = NO_WINDOW;
      tt->enum_def.fields[1].name = tdrpStrDup("HANNING");
      tt->enum_def.fields[1].val = HANNING;
      tt->enum_def.fields[2].name = tdrpStrDup("BLACKMAN");
      tt->enum_def.fields[2].val = BLACKMAN;
    tt->single_val.e = HANNING;
    tt++;
    
    // Parameter 'zdr_correction'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zdr_correction");
    tt->descr = tdrpStrDup("Correction for Zdr (dB).");
    tt->help = tdrpStrDup("It is difficult to calibrate accurately for Zdr. Therefore, a small correction is generally required.");
    tt->val_offset = (char *) &zdr_correction - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'Comment 9'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 9");
    tt->comment_hdr = tdrpStrDup("CMD - CLUTTER MITIGATION DECISION system");
    tt->comment_text = tdrpStrDup("Option to use the compute and use CMD fields. Note that the CMD can only be used if beams are indexed in azimuth. Set 'index_beams_in_azimuth' to true.");
    tt++;
    
    // Parameter 'apply_cmd'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("apply_cmd");
    tt->descr = tdrpStrDup("Option to apply the CMD for filtering.");
    tt->help = tdrpStrDup("If true, the CMD will be used to determine to which gates filtering should be applied.");
    tt->val_offset = (char *) &apply_cmd - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'cmd_kernel_ngates'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("cmd_kernel_ngates");
    tt->descr = tdrpStrDup("Length of CMD kernel in range (gates).");
    tt->help = tdrpStrDup("All CMD features are computed over a kernel in range. This is the number of gates in the kernel.");
    tt->val_offset = (char *) &cmd_kernel_ngates - &_start_;
    tt->single_val.i = 9;
    tt++;
    
    // Parameter 'cmd_kernel_nbeams'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("cmd_kernel_nbeams");
    tt->descr = tdrpStrDup("Width of CMD kernel in azimuth (beams).");
    tt->help = tdrpStrDup("Some of the CMD features are computed over the kernel in azimuth as well as range. This is the width of the kernel in beams.");
    tt->val_offset = (char *) &cmd_kernel_nbeams - &_start_;
    tt->single_val.i = 5;
    tt++;
    
    // Parameter 'cmd_spin_dbz_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("cmd_spin_dbz_threshold");
    tt->descr = tdrpStrDup("Threshold for computing spin change in the CMD (dBZ).");
    tt->help = tdrpStrDup("The SPIN change variable is computed using the difference in dBZ between adjacent gates. If the difference exceeds this threshold, the change counter is incremented.");
    tt->val_offset = (char *) &cmd_spin_dbz_threshold - &_start_;
    tt->single_val.d = 5.5;
    tt++;
    
    // Parameter 'cmd_snr_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("cmd_snr_threshold");
    tt->descr = tdrpStrDup("Signal-to-noise ratio value for CMD (dB).");
    tt->help = tdrpStrDup("Only gates which exceed this snr will be considered for the CMD flag.");
    tt->val_offset = (char *) &cmd_snr_threshold - &_start_;
    tt->single_val.d = 3;
    tt++;
    
    // Parameter 'min_clutter_ratio_narrow'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("min_clutter_ratio_narrow");
    tt->descr = tdrpStrDup("Minimum ratio narrow for clutter (dB).");
    tt->help = tdrpStrDup("Clutter will only be considered if ratioNarrow exceeds this value.");
    tt->val_offset = (char *) &min_clutter_ratio_narrow - &_start_;
    tt->single_val.d = 6;
    tt++;
    
    // Parameter 'cmd_threshold_for_clutter'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("cmd_threshold_for_clutter");
    tt->descr = tdrpStrDup("Threshold CMD value for identifying clutter.");
    tt->help = tdrpStrDup("If the CMD value exceeds this threshold, clutter is assumed to exist at that point.");
    tt->val_offset = (char *) &cmd_threshold_for_clutter - &_start_;
    tt->single_val.d = 0.5;
    tt++;
    
    // Parameter 'apply_db_for_db_correction'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("apply_db_for_db_correction");
    tt->descr = tdrpStrDup("Option to apply db-for-db correction after applying CMD.");
    tt->help = tdrpStrDup("When a significant level of clutter is present, the noise level in the speactral skirts rises. It is not possible to adjust for this directly in the filter. Therefore, and extra correction is needed. The db-for-db correction was developed in the legacy NEXRAD system. For every db of power removed by the filter below the db_for_db_threshold, an extra db_for_db is removed. For every db of power removed above the threshold, and extra 1 db is removed.");
    tt->val_offset = (char *) &apply_db_for_db_correction - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'db_for_db_ratio'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("db_for_db_ratio");
    tt->descr = tdrpStrDup("Ratio for computing clutter correction when below db_for_db_threshold.");
    tt->help = tdrpStrDup("If the clutter power removed is less than db_for_db_threshold, the db_for_db_corection is the clutter db multiplied by this ratio.");
    tt->val_offset = (char *) &db_for_db_ratio - &_start_;
    tt->single_val.d = 0.1;
    tt++;
    
    // Parameter 'db_for_db_threshold'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("db_for_db_threshold");
    tt->descr = tdrpStrDup("Threshold for db_for_db correction.");
    tt->help = tdrpStrDup("If the computed clutter power is less than this threshold, then the db_for_db correction is computed as the db_for_db_ratio multiplied by the clutter power. If the clutter power exceeds this threshold, the correction is 1 db for every db by which the clutter exceeds the threshold.");
    tt->val_offset = (char *) &db_for_db_threshold - &_start_;
    tt->single_val.d = 50;
    tt++;
    
    // Parameter 'apply_cmd_speckle_filter'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("apply_cmd_speckle_filter");
    tt->descr = tdrpStrDup("Option to apply speckle filter to CMD flag field.");
    tt->help = tdrpStrDup("If true, a speckle filter will be applied to the flag field after thresholding. There are two components to the filter: (a) it there are small gaps in the CMD field with a significant number of gates set on either side, then the gaps are filled in; (b) if there are isolated gates where the CMD flag is set, surrounded by gates not set, the flag is removed at those gates if the reflectivity at the flagged region does not exceed max reflectivity at the surrounding gates. See the following parameters for more details.");
    tt->val_offset = (char *) &apply_cmd_speckle_filter - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'cmd_speckle_max_ngates_infilled'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("cmd_speckle_max_ngates_infilled");
    tt->descr = tdrpStrDup("Max number of gates filled in by the speckle filter.");
    tt->help = tdrpStrDup("The filter will only fill in sections surrounded by at least the same number of gates. For example, if one gate is not flagged but the gates on either side are, it is filled in. If two gates are not flagged but are surrounded by two flagged gates on either side, these are filled in. And so on up to this max numbed of gates to be filled in.");
    tt->val_offset = (char *) &cmd_speckle_max_ngates_infilled - &_start_;
    tt->single_val.i = 3;
    tt++;
    
    // Parameter 'cmd_speckle_max_ngates_removed'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("cmd_speckle_max_ngates_removed");
    tt->descr = tdrpStrDup("Max number of gates removed by the speckle filter.");
    tt->help = tdrpStrDup("The filter will only remove sections surrounded by at least the same number of gates. For example, if one gate is flagged but the gates on either side are not, it is removed provided the reflectivity does not exceed the surrounding gates by cmd_speckle_dbz_margin. If two gates are flagged but are surrounded by two unflagged gates on either side, these are removed if the max reflectivity in these two gates does not exceed the max in the surrounding 4 gates by at least cmd_speckle_dbz_margin. And so on up to this max numbed of gates to be removed.");
    tt->val_offset = (char *) &cmd_speckle_max_ngates_removed - &_start_;
    tt->single_val.i = 2;
    tt++;
    
    // Parameter 'cmd_speckle_dbz_margin'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("cmd_speckle_dbz_margin");
    tt->descr = tdrpStrDup("Threshold CMD value for identifying clutter.");
    tt->help = tdrpStrDup("If the CMD value exceeds this threshold, clutter is assumed to exist at that point.");
    tt->val_offset = (char *) &cmd_speckle_dbz_margin - &_start_;
    tt->single_val.d = 0.5;
    tt++;
    
    // Parameter 'apply_nexrad_spike_filter_after_cmd'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("apply_nexrad_spike_filter_after_cmd");
    tt->descr = tdrpStrDup("Option to apply spike filter after the CMD.");
    tt->help = tdrpStrDup("If true, the NEXRAD spike filter will be applied to the filtered fields.");
    tt->val_offset = (char *) &apply_nexrad_spike_filter_after_cmd - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'use_dbz_narrow_for_tdbz_and_spin'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("use_dbz_narrow_for_tdbz_and_spin");
    tt->descr = tdrpStrDup("Option to use dbz narrow for computing tdbz and spin.");
    tt->help = tdrpStrDup("Normally, dBZ is used to compute tdbz and spin. If this option is set true, then a dbz value is computed from just those points close to 0 velocity and this value is used to compute tdbz and spin.");
    tt->val_offset = (char *) &use_dbz_narrow_for_tdbz_and_spin - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 10'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 10");
    tt->comment_hdr = tdrpStrDup("CMD INTEREST MAPS and WEIGHTS");
    tt->comment_text = tdrpStrDup("Each map should hold at least 2 points. The points should be increasing in value, i.e. the value should increase for each subsequent point. The various interest values are combined using the specified weights in a weighted mean to produce the final CMD value.");
    tt++;
    
    // Parameter 'tdbz_interest_map'
    // ctype is '_interest_map_point_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("tdbz_interest_map");
    tt->descr = tdrpStrDup("Interest mapping for TDBZ.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_tdbz_interest_map - &_start_;
    tt->array_n_offset = (char *) &tdbz_interest_map_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interest_map_point_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("interest_map_point_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("value");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_tdbz_interest_map->value - (char *) _tdbz_interest_map;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("interest");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_tdbz_interest_map->interest - (char *) _tdbz_interest_map;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0;
      tt->struct_vals[1].d = 0.001;
      tt->struct_vals[2].d = 30;
      tt->struct_vals[3].d = 1;
    tt++;
    
    // Parameter 'tdbz_interest_weight'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("tdbz_interest_weight");
    tt->descr = tdrpStrDup("Weight for for TDBZ.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &tdbz_interest_weight - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'sqrt_tdbz_interest_map'
    // ctype is '_interest_map_point_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("sqrt_tdbz_interest_map");
    tt->descr = tdrpStrDup("Interest mapping for sqrt TDBZ.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_sqrt_tdbz_interest_map - &_start_;
    tt->array_n_offset = (char *) &sqrt_tdbz_interest_map_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interest_map_point_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("interest_map_point_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("value");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_sqrt_tdbz_interest_map->value - (char *) _sqrt_tdbz_interest_map;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("interest");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_sqrt_tdbz_interest_map->interest - (char *) _sqrt_tdbz_interest_map;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0;
      tt->struct_vals[1].d = 0;
      tt->struct_vals[2].d = 6.5;
      tt->struct_vals[3].d = 1;
    tt++;
    
    // Parameter 'sqrt_tdbz_interest_weight'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("sqrt_tdbz_interest_weight");
    tt->descr = tdrpStrDup("Weight for for sqrt TDBZ.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &sqrt_tdbz_interest_weight - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'spin_interest_map'
    // ctype is '_interest_map_point_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("spin_interest_map");
    tt->descr = tdrpStrDup("Interest mapping for dBZ spin.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_spin_interest_map - &_start_;
    tt->array_n_offset = (char *) &spin_interest_map_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interest_map_point_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("interest_map_point_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("value");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_spin_interest_map->value - (char *) _spin_interest_map;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("interest");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_spin_interest_map->interest - (char *) _spin_interest_map;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0;
      tt->struct_vals[1].d = 0.001;
      tt->struct_vals[2].d = 25;
      tt->struct_vals[3].d = 1;
    tt++;
    
    // Parameter 'spin_interest_weight'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("spin_interest_weight");
    tt->descr = tdrpStrDup("Weight for for dBZ spin.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &spin_interest_weight - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'cvar_db_interest_map'
    // ctype is '_interest_map_point_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("cvar_db_interest_map");
    tt->descr = tdrpStrDup("Interest mapping for CVAR of DB in spectrum.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_cvar_db_interest_map - &_start_;
    tt->array_n_offset = (char *) &cvar_db_interest_map_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interest_map_point_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("interest_map_point_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("value");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_cvar_db_interest_map->value - (char *) _cvar_db_interest_map;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("interest");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_cvar_db_interest_map->interest - (char *) _cvar_db_interest_map;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = -3.5;
      tt->struct_vals[1].d = 1;
      tt->struct_vals[2].d = -2.5;
      tt->struct_vals[3].d = 0;
    tt++;
    
    // Parameter 'cvar_db_interest_weight'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("cvar_db_interest_weight");
    tt->descr = tdrpStrDup("Weight for for CVAR of DB in spectrum.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &cvar_db_interest_weight - &_start_;
    tt->single_val.d = 0.5;
    tt++;
    
    // Parameter 'cpa_interest_map'
    // ctype is '_interest_map_point_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("cpa_interest_map");
    tt->descr = tdrpStrDup("Interest mapping for clutter phase alignment.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_cpa_interest_map - &_start_;
    tt->array_n_offset = (char *) &cpa_interest_map_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interest_map_point_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("interest_map_point_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("value");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_cpa_interest_map->value - (char *) _cpa_interest_map;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("interest");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_cpa_interest_map->interest - (char *) _cpa_interest_map;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0.45;
      tt->struct_vals[1].d = 0;
      tt->struct_vals[2].d = 0.55;
      tt->struct_vals[3].d = 1;
    tt++;
    
    // Parameter 'cpa_interest_weight'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("cpa_interest_weight");
    tt->descr = tdrpStrDup("Weight for for clutter phase alignment.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &cpa_interest_weight - &_start_;
    tt->single_val.d = 1;
    tt++;
    
    // Parameter 'vel_interest_map'
    // ctype is '_interest_map_point_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("vel_interest_map");
    tt->descr = tdrpStrDup("Interest mapping for velocity.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_vel_interest_map - &_start_;
    tt->array_n_offset = (char *) &vel_interest_map_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interest_map_point_t);
    tt->array_n = 3;
    tt->struct_def.name = tdrpStrDup("interest_map_point_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("value");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_vel_interest_map->value - (char *) _vel_interest_map;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("interest");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_vel_interest_map->interest - (char *) _vel_interest_map;
    tt->n_struct_vals = 6;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = -2.3;
      tt->struct_vals[1].d = 0;
      tt->struct_vals[2].d = 0;
      tt->struct_vals[3].d = 1;
      tt->struct_vals[4].d = 2.3;
      tt->struct_vals[5].d = 0;
    tt++;
    
    // Parameter 'vel_interest_weight'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("vel_interest_weight");
    tt->descr = tdrpStrDup("Weight for for velocity.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &vel_interest_weight - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'width_interest_map'
    // ctype is '_interest_map_point_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("width_interest_map");
    tt->descr = tdrpStrDup("Interest mapping for spectrum width.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_width_interest_map - &_start_;
    tt->array_n_offset = (char *) &width_interest_map_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interest_map_point_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("interest_map_point_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("value");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_width_interest_map->value - (char *) _width_interest_map;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("interest");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_width_interest_map->interest - (char *) _width_interest_map;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0;
      tt->struct_vals[1].d = 1;
      tt->struct_vals[2].d = 3.2;
      tt->struct_vals[3].d = 0;
    tt++;
    
    // Parameter 'width_interest_weight'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("width_interest_weight");
    tt->descr = tdrpStrDup("Weight for for spectrum width.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &width_interest_weight - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'vel_sdev_interest_map'
    // ctype is '_interest_map_point_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("vel_sdev_interest_map");
    tt->descr = tdrpStrDup("Interest mapping for standard deviation of velocity.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_vel_sdev_interest_map - &_start_;
    tt->array_n_offset = (char *) &vel_sdev_interest_map_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interest_map_point_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("interest_map_point_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("value");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_vel_sdev_interest_map->value - (char *) _vel_sdev_interest_map;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("interest");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_vel_sdev_interest_map->interest - (char *) _vel_sdev_interest_map;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0;
      tt->struct_vals[1].d = 1;
      tt->struct_vals[2].d = 0.7;
      tt->struct_vals[3].d = 0;
    tt++;
    
    // Parameter 'vel_sdev_interest_weight'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("vel_sdev_interest_weight");
    tt->descr = tdrpStrDup("Weight for for standard deviation of velocity.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &vel_sdev_interest_weight - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'zdr_sdev_interest_map'
    // ctype is '_interest_map_point_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("zdr_sdev_interest_map");
    tt->descr = tdrpStrDup("Interest mapping for zdr.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_zdr_sdev_interest_map - &_start_;
    tt->array_n_offset = (char *) &zdr_sdev_interest_map_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interest_map_point_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("interest_map_point_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("value");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_zdr_sdev_interest_map->value - (char *) _zdr_sdev_interest_map;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("interest");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_zdr_sdev_interest_map->interest - (char *) _zdr_sdev_interest_map;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 1.5;
      tt->struct_vals[1].d = 0.001;
      tt->struct_vals[2].d = 2.5;
      tt->struct_vals[3].d = 1;
    tt++;
    
    // Parameter 'zdr_sdev_interest_weight'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("zdr_sdev_interest_weight");
    tt->descr = tdrpStrDup("Weight for for standard deviation of zdr.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &zdr_sdev_interest_weight - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'rhohv_interest_map'
    // ctype is '_interest_map_point_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("rhohv_interest_map");
    tt->descr = tdrpStrDup("Interest mapping for rhohv.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_rhohv_interest_map - &_start_;
    tt->array_n_offset = (char *) &rhohv_interest_map_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interest_map_point_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("interest_map_point_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("value");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_rhohv_interest_map->value - (char *) _rhohv_interest_map;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("interest");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_rhohv_interest_map->interest - (char *) _rhohv_interest_map;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0.97;
      tt->struct_vals[1].d = 0;
      tt->struct_vals[2].d = 0.98;
      tt->struct_vals[3].d = -1;
    tt++;
    
    // Parameter 'rhohv_interest_weight'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("rhohv_interest_weight");
    tt->descr = tdrpStrDup("Weight for for standard deviation of rhohv.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &rhohv_interest_weight - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'rhohv_sdev_interest_map'
    // ctype is '_interest_map_point_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("rhohv_sdev_interest_map");
    tt->descr = tdrpStrDup("Interest mapping for standard deviation of rhohv.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_rhohv_sdev_interest_map - &_start_;
    tt->array_n_offset = (char *) &rhohv_sdev_interest_map_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interest_map_point_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("interest_map_point_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("value");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_rhohv_sdev_interest_map->value - (char *) _rhohv_sdev_interest_map;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("interest");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_rhohv_sdev_interest_map->interest - (char *) _rhohv_sdev_interest_map;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0.05;
      tt->struct_vals[1].d = -1;
      tt->struct_vals[2].d = 0.1;
      tt->struct_vals[3].d = 0;
    tt++;
    
    // Parameter 'rhohv_sdev_interest_weight'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("rhohv_sdev_interest_weight");
    tt->descr = tdrpStrDup("Weight for for standard deviation of rhohv.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &rhohv_sdev_interest_weight - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'phidp_sdev_interest_map'
    // ctype is '_interest_map_point_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("phidp_sdev_interest_map");
    tt->descr = tdrpStrDup("Interest mapping for standard deviation of phidp.");
    tt->help = tdrpStrDup("");
    tt->array_offset = (char *) &_phidp_sdev_interest_map - &_start_;
    tt->array_n_offset = (char *) &phidp_sdev_interest_map_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interest_map_point_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("interest_map_point_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("value");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_phidp_sdev_interest_map->value - (char *) _phidp_sdev_interest_map;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("interest");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_phidp_sdev_interest_map->interest - (char *) _phidp_sdev_interest_map;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 4;
      tt->struct_vals[1].d = -1;
      tt->struct_vals[2].d = 6;
      tt->struct_vals[3].d = 0;
    tt++;
    
    // Parameter 'phidp_sdev_interest_weight'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("phidp_sdev_interest_weight");
    tt->descr = tdrpStrDup("Weight for for standard deviation of phidp.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &phidp_sdev_interest_weight - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'clut_ratio_narrow_interest_map'
    // ctype is '_interest_map_point_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("clut_ratio_narrow_interest_map");
    tt->descr = tdrpStrDup("Interest mapping for clutter ratio narrow.");
    tt->help = tdrpStrDup("Clutter ratio narrow is the ratio of the power in the 3 spectral points at 0 m/s divided by the power in the 4 spectral points around this. Expressed in dB.");
    tt->array_offset = (char *) &_clut_ratio_narrow_interest_map - &_start_;
    tt->array_n_offset = (char *) &clut_ratio_narrow_interest_map_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interest_map_point_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("interest_map_point_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("value");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_clut_ratio_narrow_interest_map->value - (char *) _clut_ratio_narrow_interest_map;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("interest");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_clut_ratio_narrow_interest_map->interest - (char *) _clut_ratio_narrow_interest_map;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 30;
      tt->struct_vals[1].d = 0;
      tt->struct_vals[2].d = 40;
      tt->struct_vals[3].d = 1;
    tt++;
    
    // Parameter 'clut_ratio_narrow_interest_weight'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("clut_ratio_narrow_interest_weight");
    tt->descr = tdrpStrDup("Weight for for clutter ration narrow.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &clut_ratio_narrow_interest_weight - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'clut_ratio_wide_interest_map'
    // ctype is '_interest_map_point_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("clut_ratio_wide_interest_map");
    tt->descr = tdrpStrDup("Interest mapping for clutter ratio wide.");
    tt->help = tdrpStrDup("Clutter ratio wide is the ratio of the power in the 3 spectral points at 0 m/s divided by the power in the rest of the spectrum. Expressed in dB.");
    tt->array_offset = (char *) &_clut_ratio_wide_interest_map - &_start_;
    tt->array_n_offset = (char *) &clut_ratio_wide_interest_map_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interest_map_point_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("interest_map_point_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("value");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_clut_ratio_wide_interest_map->value - (char *) _clut_ratio_wide_interest_map;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("interest");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_clut_ratio_wide_interest_map->interest - (char *) _clut_ratio_wide_interest_map;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 9;
      tt->struct_vals[1].d = 0;
      tt->struct_vals[2].d = 15;
      tt->struct_vals[3].d = 1;
    tt++;
    
    // Parameter 'clut_ratio_wide_interest_weight'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("clut_ratio_wide_interest_weight");
    tt->descr = tdrpStrDup("Weight for for clutter ratio wide.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &clut_ratio_wide_interest_weight - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'clut_wx_peak_sep_interest_map'
    // ctype is '_interest_map_point_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("clut_wx_peak_sep_interest_map");
    tt->descr = tdrpStrDup("Interest mapping for clutter-to-weather peak separation.");
    tt->help = tdrpStrDup("Spectral separation of clutter and weather peaks, expressed as a fraction of the nyquist.");
    tt->array_offset = (char *) &_clut_wx_peak_sep_interest_map - &_start_;
    tt->array_n_offset = (char *) &clut_wx_peak_sep_interest_map_n - &_start_;
    tt->is_array = TRUE;
    tt->array_len_fixed = FALSE;
    tt->array_elem_size = sizeof(interest_map_point_t);
    tt->array_n = 2;
    tt->struct_def.name = tdrpStrDup("interest_map_point_t");
    tt->struct_def.nfields = 2;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("value");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &_clut_wx_peak_sep_interest_map->value - (char *) _clut_wx_peak_sep_interest_map;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("interest");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &_clut_wx_peak_sep_interest_map->interest - (char *) _clut_wx_peak_sep_interest_map;
    tt->n_struct_vals = 4;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0.25;
      tt->struct_vals[1].d = 0;
      tt->struct_vals[2].d = 0.35;
      tt->struct_vals[3].d = 1;
    tt++;
    
    // Parameter 'clut_wx_peak_sep_interest_weight'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("clut_wx_peak_sep_interest_weight");
    tt->descr = tdrpStrDup("Weight for for  clutter-to-wx peak separation.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &clut_wx_peak_sep_interest_weight - &_start_;
    tt->single_val.d = 0;
    tt++;
    
    // Parameter 'Comment 11'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 11");
    tt->comment_hdr = tdrpStrDup("OUTPUT TO DSRADAR FMQ");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'output_fmq_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("output_fmq_url");
    tt->descr = tdrpStrDup("Output URL for DsRadar data via FMQ");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &output_fmq_url - &_start_;
    tt->single_val.s = tdrpStrDup("fmqp:://localhost::fmq/lirp");
    tt++;
    
    // Parameter 'output_fmq_size'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("output_fmq_size");
    tt->descr = tdrpStrDup("Size of output FMQ, in bytes.");
    tt->help = tdrpStrDup("This is the total size of the output FMQ buffer. Some of this buffer will be used for control bytes (12 bytes per message).");
    tt->val_offset = (char *) &output_fmq_size - &_start_;
    tt->single_val.i = 50000000;
    tt++;
    
    // Parameter 'output_fmq_nslots'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("output_fmq_nslots");
    tt->descr = tdrpStrDup("Number of slots in output FMQ.");
    tt->help = tdrpStrDup("The number of slots corresponds to the maximum number of messages which may be written to the buffer before overwrites occur. However, overwrites may occur sooner if the size is not set large enough.");
    tt->val_offset = (char *) &output_fmq_nslots - &_start_;
    tt->single_val.i = 7200;
    tt++;
    
    // Parameter 'output_fmq_compress'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("output_fmq_compress");
    tt->descr = tdrpStrDup("FMQ compression option.");
    tt->help = tdrpStrDup("If TRUE FMQ messages are compressed.");
    tt->val_offset = (char *) &output_fmq_compress - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'write_blocking'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_blocking");
    tt->descr = tdrpStrDup("Option to set up the FMQ as blocking.");
    tt->help = tdrpStrDup("If TRUE, FMQ will be set up FMQ for blocking operation. If the FMQ becomes full, Test2Dsr will then block until there is space for more data.");
    tt->val_offset = (char *) &write_blocking - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'beam_wait_msecs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("beam_wait_msecs");
    tt->descr = tdrpStrDup("Wait per beam (milli-secs)");
    tt->help = tdrpStrDup("ARCHIVE and SIMULATE modes only.");
    tt->val_offset = (char *) &beam_wait_msecs - &_start_;
    tt->single_val.i = 0;
    tt++;
    
    // Parameter 'set_end_of_vol_from_elev_angle'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("set_end_of_vol_from_elev_angle");
    tt->descr = tdrpStrDup("Option to set the end of vol flag based on elevation angle.");
    tt->help = tdrpStrDup("If true, the program will look for changes in antenna angle to compute the end of volume.");
    tt->val_offset = (char *) &set_end_of_vol_from_elev_angle - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'vol_starts_at_bottom'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("vol_starts_at_bottom");
    tt->descr = tdrpStrDup("Flag to indicate that elevation angles increase in the volume.");
    tt->help = tdrpStrDup("If the volume starts at the top, i.e. elevations decrease during the volume, set this to FALSE.");
    tt->val_offset = (char *) &vol_starts_at_bottom - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'elev_change_for_end_of_vol'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("elev_change_for_end_of_vol");
    tt->descr = tdrpStrDup("Change in elevation which triggers and end of volume.");
    tt->help = tdrpStrDup("If the elevation angle changes by this amount, and end of volume flag will be set.");
    tt->val_offset = (char *) &elev_change_for_end_of_vol - &_start_;
    tt->has_min = TRUE;
    tt->min_val.d = 0.1;
    tt->single_val.d = 1.5;
    tt++;
    
    // Parameter 'min_beams_per_vol'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("min_beams_per_vol");
    tt->descr = tdrpStrDup("Min number of beams per volume.");
    tt->help = tdrpStrDup("Used to prevent end-of-volume conditions being determined during antenna transition to the start of the next volume. Only used for set_end_of_vol_from_elev_angle.");
    tt->val_offset = (char *) &min_beams_per_vol - &_start_;
    tt->single_val.i = 360;
    tt++;
    
    // Parameter 'set_end_of_vol_on_prf_change'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("set_end_of_vol_on_prf_change");
    tt->descr = tdrpStrDup("Option to set the end-of-vol flag when the PRF changes.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &set_end_of_vol_on_prf_change - &_start_;
    tt->single_val.b = pTRUE;
    tt++;
    
    // Parameter 'output_fields'
    // ctype is '_output_fields_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("output_fields");
    tt->descr = tdrpStrDup("Set which fields are to be output to the FMQ.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &output_fields - &_start_;
    tt->struct_def.name = tdrpStrDup("output_fields_t");
    tt->struct_def.nfields = 60;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[0].fname = tdrpStrDup("snr");
      tt->struct_def.fields[0].ptype = BOOL_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &output_fields.snr - (char *) &output_fields;
      tt->struct_def.fields[1].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[1].fname = tdrpStrDup("dbm");
      tt->struct_def.fields[1].ptype = BOOL_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &output_fields.dbm - (char *) &output_fields;
      tt->struct_def.fields[2].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[2].fname = tdrpStrDup("dbz");
      tt->struct_def.fields[2].ptype = BOOL_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &output_fields.dbz - (char *) &output_fields;
      tt->struct_def.fields[3].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[3].fname = tdrpStrDup("vel");
      tt->struct_def.fields[3].ptype = BOOL_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &output_fields.vel - (char *) &output_fields;
      tt->struct_def.fields[4].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[4].fname = tdrpStrDup("width");
      tt->struct_def.fields[4].ptype = BOOL_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &output_fields.width - (char *) &output_fields;
      tt->struct_def.fields[5].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[5].fname = tdrpStrDup("clut");
      tt->struct_def.fields[5].ptype = BOOL_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &output_fields.clut - (char *) &output_fields;
      tt->struct_def.fields[6].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[6].fname = tdrpStrDup("dbzf");
      tt->struct_def.fields[6].ptype = BOOL_TYPE;
      tt->struct_def.fields[6].rel_offset = 
        (char *) &output_fields.dbzf - (char *) &output_fields;
      tt->struct_def.fields[7].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[7].fname = tdrpStrDup("velf");
      tt->struct_def.fields[7].ptype = BOOL_TYPE;
      tt->struct_def.fields[7].rel_offset = 
        (char *) &output_fields.velf - (char *) &output_fields;
      tt->struct_def.fields[8].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[8].fname = tdrpStrDup("widthf");
      tt->struct_def.fields[8].ptype = BOOL_TYPE;
      tt->struct_def.fields[8].rel_offset = 
        (char *) &output_fields.widthf - (char *) &output_fields;
      tt->struct_def.fields[9].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[9].fname = tdrpStrDup("zdr");
      tt->struct_def.fields[9].ptype = BOOL_TYPE;
      tt->struct_def.fields[9].rel_offset = 
        (char *) &output_fields.zdr - (char *) &output_fields;
      tt->struct_def.fields[10].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[10].fname = tdrpStrDup("zdrm");
      tt->struct_def.fields[10].ptype = BOOL_TYPE;
      tt->struct_def.fields[10].rel_offset = 
        (char *) &output_fields.zdrm - (char *) &output_fields;
      tt->struct_def.fields[11].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[11].fname = tdrpStrDup("ldrh");
      tt->struct_def.fields[11].ptype = BOOL_TYPE;
      tt->struct_def.fields[11].rel_offset = 
        (char *) &output_fields.ldrh - (char *) &output_fields;
      tt->struct_def.fields[12].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[12].fname = tdrpStrDup("ldrv");
      tt->struct_def.fields[12].ptype = BOOL_TYPE;
      tt->struct_def.fields[12].rel_offset = 
        (char *) &output_fields.ldrv - (char *) &output_fields;
      tt->struct_def.fields[13].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[13].fname = tdrpStrDup("rhohv");
      tt->struct_def.fields[13].ptype = BOOL_TYPE;
      tt->struct_def.fields[13].rel_offset = 
        (char *) &output_fields.rhohv - (char *) &output_fields;
      tt->struct_def.fields[14].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[14].fname = tdrpStrDup("phidp");
      tt->struct_def.fields[14].ptype = BOOL_TYPE;
      tt->struct_def.fields[14].rel_offset = 
        (char *) &output_fields.phidp - (char *) &output_fields;
      tt->struct_def.fields[15].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[15].fname = tdrpStrDup("kdp");
      tt->struct_def.fields[15].ptype = BOOL_TYPE;
      tt->struct_def.fields[15].rel_offset = 
        (char *) &output_fields.kdp - (char *) &output_fields;
      tt->struct_def.fields[16].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[16].fname = tdrpStrDup("snrhc");
      tt->struct_def.fields[16].ptype = BOOL_TYPE;
      tt->struct_def.fields[16].rel_offset = 
        (char *) &output_fields.snrhc - (char *) &output_fields;
      tt->struct_def.fields[17].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[17].fname = tdrpStrDup("snrhx");
      tt->struct_def.fields[17].ptype = BOOL_TYPE;
      tt->struct_def.fields[17].rel_offset = 
        (char *) &output_fields.snrhx - (char *) &output_fields;
      tt->struct_def.fields[18].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[18].fname = tdrpStrDup("snrvc");
      tt->struct_def.fields[18].ptype = BOOL_TYPE;
      tt->struct_def.fields[18].rel_offset = 
        (char *) &output_fields.snrvc - (char *) &output_fields;
      tt->struct_def.fields[19].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[19].fname = tdrpStrDup("snrvx");
      tt->struct_def.fields[19].ptype = BOOL_TYPE;
      tt->struct_def.fields[19].rel_offset = 
        (char *) &output_fields.snrvx - (char *) &output_fields;
      tt->struct_def.fields[20].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[20].fname = tdrpStrDup("dbmhc");
      tt->struct_def.fields[20].ptype = BOOL_TYPE;
      tt->struct_def.fields[20].rel_offset = 
        (char *) &output_fields.dbmhc - (char *) &output_fields;
      tt->struct_def.fields[21].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[21].fname = tdrpStrDup("dbmhx");
      tt->struct_def.fields[21].ptype = BOOL_TYPE;
      tt->struct_def.fields[21].rel_offset = 
        (char *) &output_fields.dbmhx - (char *) &output_fields;
      tt->struct_def.fields[22].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[22].fname = tdrpStrDup("dbmvc");
      tt->struct_def.fields[22].ptype = BOOL_TYPE;
      tt->struct_def.fields[22].rel_offset = 
        (char *) &output_fields.dbmvc - (char *) &output_fields;
      tt->struct_def.fields[23].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[23].fname = tdrpStrDup("dbmvx");
      tt->struct_def.fields[23].ptype = BOOL_TYPE;
      tt->struct_def.fields[23].rel_offset = 
        (char *) &output_fields.dbmvx - (char *) &output_fields;
      tt->struct_def.fields[24].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[24].fname = tdrpStrDup("dbzhc");
      tt->struct_def.fields[24].ptype = BOOL_TYPE;
      tt->struct_def.fields[24].rel_offset = 
        (char *) &output_fields.dbzhc - (char *) &output_fields;
      tt->struct_def.fields[25].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[25].fname = tdrpStrDup("dbzhx");
      tt->struct_def.fields[25].ptype = BOOL_TYPE;
      tt->struct_def.fields[25].rel_offset = 
        (char *) &output_fields.dbzhx - (char *) &output_fields;
      tt->struct_def.fields[26].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[26].fname = tdrpStrDup("dbzvc");
      tt->struct_def.fields[26].ptype = BOOL_TYPE;
      tt->struct_def.fields[26].rel_offset = 
        (char *) &output_fields.dbzvc - (char *) &output_fields;
      tt->struct_def.fields[27].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[27].fname = tdrpStrDup("dbzvx");
      tt->struct_def.fields[27].ptype = BOOL_TYPE;
      tt->struct_def.fields[27].rel_offset = 
        (char *) &output_fields.dbzvx - (char *) &output_fields;
      tt->struct_def.fields[28].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[28].fname = tdrpStrDup("sz_trip_flag");
      tt->struct_def.fields[28].ptype = BOOL_TYPE;
      tt->struct_def.fields[28].rel_offset = 
        (char *) &output_fields.sz_trip_flag - (char *) &output_fields;
      tt->struct_def.fields[29].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[29].fname = tdrpStrDup("sz_leakage");
      tt->struct_def.fields[29].ptype = BOOL_TYPE;
      tt->struct_def.fields[29].rel_offset = 
        (char *) &output_fields.sz_leakage - (char *) &output_fields;
      tt->struct_def.fields[30].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[30].fname = tdrpStrDup("sz_dbzt");
      tt->struct_def.fields[30].ptype = BOOL_TYPE;
      tt->struct_def.fields[30].rel_offset = 
        (char *) &output_fields.sz_dbzt - (char *) &output_fields;
      tt->struct_def.fields[31].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[31].fname = tdrpStrDup("sz_zinfill");
      tt->struct_def.fields[31].ptype = BOOL_TYPE;
      tt->struct_def.fields[31].rel_offset = 
        (char *) &output_fields.sz_zinfill - (char *) &output_fields;
      tt->struct_def.fields[32].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[32].fname = tdrpStrDup("sz_itexture");
      tt->struct_def.fields[32].ptype = BOOL_TYPE;
      tt->struct_def.fields[32].rel_offset = 
        (char *) &output_fields.sz_itexture - (char *) &output_fields;
      tt->struct_def.fields[33].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[33].fname = tdrpStrDup("sz_dbzi");
      tt->struct_def.fields[33].ptype = BOOL_TYPE;
      tt->struct_def.fields[33].rel_offset = 
        (char *) &output_fields.sz_dbzi - (char *) &output_fields;
      tt->struct_def.fields[34].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[34].fname = tdrpStrDup("sz_veli");
      tt->struct_def.fields[34].ptype = BOOL_TYPE;
      tt->struct_def.fields[34].rel_offset = 
        (char *) &output_fields.sz_veli - (char *) &output_fields;
      tt->struct_def.fields[35].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[35].fname = tdrpStrDup("sz_widthi");
      tt->struct_def.fields[35].ptype = BOOL_TYPE;
      tt->struct_def.fields[35].rel_offset = 
        (char *) &output_fields.sz_widthi - (char *) &output_fields;
      tt->struct_def.fields[36].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[36].fname = tdrpStrDup("cmd");
      tt->struct_def.fields[36].ptype = BOOL_TYPE;
      tt->struct_def.fields[36].rel_offset = 
        (char *) &output_fields.cmd - (char *) &output_fields;
      tt->struct_def.fields[37].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[37].fname = tdrpStrDup("cmd_flag");
      tt->struct_def.fields[37].ptype = BOOL_TYPE;
      tt->struct_def.fields[37].rel_offset = 
        (char *) &output_fields.cmd_flag - (char *) &output_fields;
      tt->struct_def.fields[38].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[38].fname = tdrpStrDup("cmd_dbz_diff_sq");
      tt->struct_def.fields[38].ptype = BOOL_TYPE;
      tt->struct_def.fields[38].rel_offset = 
        (char *) &output_fields.cmd_dbz_diff_sq - (char *) &output_fields;
      tt->struct_def.fields[39].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[39].fname = tdrpStrDup("cmd_spin_change");
      tt->struct_def.fields[39].ptype = BOOL_TYPE;
      tt->struct_def.fields[39].rel_offset = 
        (char *) &output_fields.cmd_spin_change - (char *) &output_fields;
      tt->struct_def.fields[40].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[40].fname = tdrpStrDup("cmd_tdbz");
      tt->struct_def.fields[40].ptype = BOOL_TYPE;
      tt->struct_def.fields[40].rel_offset = 
        (char *) &output_fields.cmd_tdbz - (char *) &output_fields;
      tt->struct_def.fields[41].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[41].fname = tdrpStrDup("cmd_sqrt_tdbz");
      tt->struct_def.fields[41].ptype = BOOL_TYPE;
      tt->struct_def.fields[41].rel_offset = 
        (char *) &output_fields.cmd_sqrt_tdbz - (char *) &output_fields;
      tt->struct_def.fields[42].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[42].fname = tdrpStrDup("cmd_spin");
      tt->struct_def.fields[42].ptype = BOOL_TYPE;
      tt->struct_def.fields[42].rel_offset = 
        (char *) &output_fields.cmd_spin - (char *) &output_fields;
      tt->struct_def.fields[43].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[43].fname = tdrpStrDup("cmd_vel");
      tt->struct_def.fields[43].ptype = BOOL_TYPE;
      tt->struct_def.fields[43].rel_offset = 
        (char *) &output_fields.cmd_vel - (char *) &output_fields;
      tt->struct_def.fields[44].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[44].fname = tdrpStrDup("cmd_vel_sdev");
      tt->struct_def.fields[44].ptype = BOOL_TYPE;
      tt->struct_def.fields[44].rel_offset = 
        (char *) &output_fields.cmd_vel_sdev - (char *) &output_fields;
      tt->struct_def.fields[45].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[45].fname = tdrpStrDup("cmd_width");
      tt->struct_def.fields[45].ptype = BOOL_TYPE;
      tt->struct_def.fields[45].rel_offset = 
        (char *) &output_fields.cmd_width - (char *) &output_fields;
      tt->struct_def.fields[46].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[46].fname = tdrpStrDup("cmd_dbz_narrow");
      tt->struct_def.fields[46].ptype = BOOL_TYPE;
      tt->struct_def.fields[46].rel_offset = 
        (char *) &output_fields.cmd_dbz_narrow - (char *) &output_fields;
      tt->struct_def.fields[47].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[47].fname = tdrpStrDup("cmd_ratio_narrow");
      tt->struct_def.fields[47].ptype = BOOL_TYPE;
      tt->struct_def.fields[47].rel_offset = 
        (char *) &output_fields.cmd_ratio_narrow - (char *) &output_fields;
      tt->struct_def.fields[48].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[48].fname = tdrpStrDup("cmd_ratio_wide");
      tt->struct_def.fields[48].ptype = BOOL_TYPE;
      tt->struct_def.fields[48].rel_offset = 
        (char *) &output_fields.cmd_ratio_wide - (char *) &output_fields;
      tt->struct_def.fields[49].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[49].fname = tdrpStrDup("cmd_wx2peak_sep");
      tt->struct_def.fields[49].ptype = BOOL_TYPE;
      tt->struct_def.fields[49].rel_offset = 
        (char *) &output_fields.cmd_wx2peak_sep - (char *) &output_fields;
      tt->struct_def.fields[50].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[50].fname = tdrpStrDup("cmd_cvar_db");
      tt->struct_def.fields[50].ptype = BOOL_TYPE;
      tt->struct_def.fields[50].rel_offset = 
        (char *) &output_fields.cmd_cvar_db - (char *) &output_fields;
      tt->struct_def.fields[51].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[51].fname = tdrpStrDup("cmd_zdr_sdev");
      tt->struct_def.fields[51].ptype = BOOL_TYPE;
      tt->struct_def.fields[51].rel_offset = 
        (char *) &output_fields.cmd_zdr_sdev - (char *) &output_fields;
      tt->struct_def.fields[52].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[52].fname = tdrpStrDup("cmd_rhohv_sdev");
      tt->struct_def.fields[52].ptype = BOOL_TYPE;
      tt->struct_def.fields[52].rel_offset = 
        (char *) &output_fields.cmd_rhohv_sdev - (char *) &output_fields;
      tt->struct_def.fields[53].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[53].fname = tdrpStrDup("cmd_phidp_sdev");
      tt->struct_def.fields[53].ptype = BOOL_TYPE;
      tt->struct_def.fields[53].rel_offset = 
        (char *) &output_fields.cmd_phidp_sdev - (char *) &output_fields;
      tt->struct_def.fields[54].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[54].fname = tdrpStrDup("cpa");
      tt->struct_def.fields[54].ptype = BOOL_TYPE;
      tt->struct_def.fields[54].rel_offset = 
        (char *) &output_fields.cpa - (char *) &output_fields;
      tt->struct_def.fields[55].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[55].fname = tdrpStrDup("aiq");
      tt->struct_def.fields[55].ptype = BOOL_TYPE;
      tt->struct_def.fields[55].rel_offset = 
        (char *) &output_fields.aiq - (char *) &output_fields;
      tt->struct_def.fields[56].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[56].fname = tdrpStrDup("niq");
      tt->struct_def.fields[56].ptype = BOOL_TYPE;
      tt->struct_def.fields[56].rel_offset = 
        (char *) &output_fields.niq - (char *) &output_fields;
      tt->struct_def.fields[57].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[57].fname = tdrpStrDup("meani");
      tt->struct_def.fields[57].ptype = BOOL_TYPE;
      tt->struct_def.fields[57].rel_offset = 
        (char *) &output_fields.meani - (char *) &output_fields;
      tt->struct_def.fields[58].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[58].fname = tdrpStrDup("meanq");
      tt->struct_def.fields[58].ptype = BOOL_TYPE;
      tt->struct_def.fields[58].rel_offset = 
        (char *) &output_fields.meanq - (char *) &output_fields;
      tt->struct_def.fields[59].ftype = tdrpStrDup("boolean");
      tt->struct_def.fields[59].fname = tdrpStrDup("test");
      tt->struct_def.fields[59].ptype = BOOL_TYPE;
      tt->struct_def.fields[59].rel_offset = 
        (char *) &output_fields.test - (char *) &output_fields;
    tt->n_struct_vals = 60;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].b = pFALSE;
      tt->struct_vals[1].b = pFALSE;
      tt->struct_vals[2].b = pTRUE;
      tt->struct_vals[3].b = pTRUE;
      tt->struct_vals[4].b = pTRUE;
      tt->struct_vals[5].b = pFALSE;
      tt->struct_vals[6].b = pFALSE;
      tt->struct_vals[7].b = pFALSE;
      tt->struct_vals[8].b = pFALSE;
      tt->struct_vals[9].b = pFALSE;
      tt->struct_vals[10].b = pFALSE;
      tt->struct_vals[11].b = pFALSE;
      tt->struct_vals[12].b = pFALSE;
      tt->struct_vals[13].b = pFALSE;
      tt->struct_vals[14].b = pFALSE;
      tt->struct_vals[15].b = pFALSE;
      tt->struct_vals[16].b = pFALSE;
      tt->struct_vals[17].b = pFALSE;
      tt->struct_vals[18].b = pFALSE;
      tt->struct_vals[19].b = pFALSE;
      tt->struct_vals[20].b = pFALSE;
      tt->struct_vals[21].b = pFALSE;
      tt->struct_vals[22].b = pFALSE;
      tt->struct_vals[23].b = pFALSE;
      tt->struct_vals[24].b = pFALSE;
      tt->struct_vals[25].b = pFALSE;
      tt->struct_vals[26].b = pFALSE;
      tt->struct_vals[27].b = pFALSE;
      tt->struct_vals[28].b = pFALSE;
      tt->struct_vals[29].b = pFALSE;
      tt->struct_vals[30].b = pFALSE;
      tt->struct_vals[31].b = pFALSE;
      tt->struct_vals[32].b = pFALSE;
      tt->struct_vals[33].b = pFALSE;
      tt->struct_vals[34].b = pFALSE;
      tt->struct_vals[35].b = pFALSE;
      tt->struct_vals[36].b = pFALSE;
      tt->struct_vals[37].b = pFALSE;
      tt->struct_vals[38].b = pFALSE;
      tt->struct_vals[39].b = pFALSE;
      tt->struct_vals[40].b = pFALSE;
      tt->struct_vals[41].b = pFALSE;
      tt->struct_vals[42].b = pFALSE;
      tt->struct_vals[43].b = pFALSE;
      tt->struct_vals[44].b = pFALSE;
      tt->struct_vals[45].b = pFALSE;
      tt->struct_vals[46].b = pFALSE;
      tt->struct_vals[47].b = pFALSE;
      tt->struct_vals[48].b = pFALSE;
      tt->struct_vals[49].b = pFALSE;
      tt->struct_vals[50].b = pFALSE;
      tt->struct_vals[51].b = pFALSE;
      tt->struct_vals[52].b = pFALSE;
      tt->struct_vals[53].b = pFALSE;
      tt->struct_vals[54].b = pFALSE;
      tt->struct_vals[55].b = pFALSE;
      tt->struct_vals[56].b = pFALSE;
      tt->struct_vals[57].b = pFALSE;
      tt->struct_vals[58].b = pFALSE;
      tt->struct_vals[59].b = pFALSE;
    tt++;
    
    // Parameter 'Comment 12'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 12");
    tt->comment_hdr = tdrpStrDup("SWEEP INFORMATION FROM SPDB");
    tt->comment_text = tdrpStrDup("Option to read volume and tilt numbers from sweep information stored in SPDB. The program will wait until it has sweep information for the current beam before writing it out. The sweep information is written at the end of the sweep.");
    tt++;
    
    // Parameter 'read_sweep_info_from_spdb'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("read_sweep_info_from_spdb");
    tt->descr = tdrpStrDup("Option to read sweep info from SPDB.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &read_sweep_info_from_spdb - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'sweep_url'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("sweep_url");
    tt->descr = tdrpStrDup("URL for sweep information");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &sweep_url - &_start_;
    tt->single_val.s = tdrpStrDup("spdbp:://localhost::spdb/sweepinfo/viraq");
    tt++;
    
    // Parameter 'sweep_search_margin'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("sweep_search_margin");
    tt->descr = tdrpStrDup("Time margin for searching for relevant sweep info - secs.");
    tt->help = tdrpStrDup("This is the time margin, on either side of the beam time, to search for sweep information. It should be at least as long as the maximum sweep duratation.");
    tt->val_offset = (char *) &sweep_search_margin - &_start_;
    tt->single_val.i = 600;
    tt++;
    
    // Parameter 'sweep_info_wait_secs'
    // ctype is 'int'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = INT_TYPE;
    tt->param_name = tdrpStrDup("sweep_info_wait_secs");
    tt->descr = tdrpStrDup("Wait time for sweep info before giving up - secs.");
    tt->help = tdrpStrDup("If no relevant sweep information is found after waiting this number of secs, the program guesses at the volume and tilt numbers.");
    tt->val_offset = (char *) &sweep_info_wait_secs - &_start_;
    tt->single_val.i = 300;
    tt++;
    
    // Parameter 'strict_sweep_times'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("strict_sweep_times");
    tt->descr = tdrpStrDup("Turn on strict time checking for sweep info.");
    tt->help = tdrpStrDup("If strict mode is on, then beams between sweeps will be marked with a tilt number of -1. In non-strict mode, the beams between sweeps will be assigned to the following sweep.");
    tt->val_offset = (char *) &strict_sweep_times - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'Comment 13'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = COMMENT_TYPE;
    tt->param_name = tdrpStrDup("Comment 13");
    tt->comment_hdr = tdrpStrDup("SPECTRAL PRINTS FOR DEBUGGING");
    tt->comment_text = tdrpStrDup("");
    tt++;
    
    // Parameter 'selected_region'
    // ctype is '_selected_region_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRUCT_TYPE;
    tt->param_name = tdrpStrDup("selected_region");
    tt->descr = tdrpStrDup("Region for selected prints and spectra files.");
    tt->help = tdrpStrDup("See do_selected_print and write_spectra_files.");
    tt->val_offset = (char *) &selected_region - &_start_;
    tt->struct_def.name = tdrpStrDup("selected_region_t");
    tt->struct_def.nfields = 6;
    tt->struct_def.fields = (struct_field_t *)
        tdrpMalloc(tt->struct_def.nfields * sizeof(struct_field_t));
      tt->struct_def.fields[0].ftype = tdrpStrDup("double");
      tt->struct_def.fields[0].fname = tdrpStrDup("min_el");
      tt->struct_def.fields[0].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[0].rel_offset = 
        (char *) &selected_region.min_el - (char *) &selected_region;
      tt->struct_def.fields[1].ftype = tdrpStrDup("double");
      tt->struct_def.fields[1].fname = tdrpStrDup("max_el");
      tt->struct_def.fields[1].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[1].rel_offset = 
        (char *) &selected_region.max_el - (char *) &selected_region;
      tt->struct_def.fields[2].ftype = tdrpStrDup("double");
      tt->struct_def.fields[2].fname = tdrpStrDup("min_az");
      tt->struct_def.fields[2].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[2].rel_offset = 
        (char *) &selected_region.min_az - (char *) &selected_region;
      tt->struct_def.fields[3].ftype = tdrpStrDup("double");
      tt->struct_def.fields[3].fname = tdrpStrDup("max_az");
      tt->struct_def.fields[3].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[3].rel_offset = 
        (char *) &selected_region.max_az - (char *) &selected_region;
      tt->struct_def.fields[4].ftype = tdrpStrDup("double");
      tt->struct_def.fields[4].fname = tdrpStrDup("min_range");
      tt->struct_def.fields[4].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[4].rel_offset = 
        (char *) &selected_region.min_range - (char *) &selected_region;
      tt->struct_def.fields[5].ftype = tdrpStrDup("double");
      tt->struct_def.fields[5].fname = tdrpStrDup("max_range");
      tt->struct_def.fields[5].ptype = DOUBLE_TYPE;
      tt->struct_def.fields[5].rel_offset = 
        (char *) &selected_region.max_range - (char *) &selected_region;
    tt->n_struct_vals = 6;
    tt->struct_vals = (tdrpVal_t *)
        tdrpMalloc(tt->n_struct_vals * sizeof(tdrpVal_t));
      tt->struct_vals[0].d = 0;
      tt->struct_vals[1].d = 1;
      tt->struct_vals[2].d = 0;
      tt->struct_vals[3].d = 1;
      tt->struct_vals[4].d = 0;
      tt->struct_vals[5].d = 1;
    tt++;
    
    // Parameter 'do_selected_print'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("do_selected_print");
    tt->descr = tdrpStrDup("Option to print info for a selected region.");
    tt->help = tdrpStrDup("If true, debug info for a selected region will be printed to stderr.");
    tt->val_offset = (char *) &do_selected_print - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'spectra_dir'
    // ctype is 'char*'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = STRING_TYPE;
    tt->param_name = tdrpStrDup("spectra_dir");
    tt->descr = tdrpStrDup("Directory to which spectra are written.");
    tt->help = tdrpStrDup("");
    tt->val_offset = (char *) &spectra_dir - &_start_;
    tt->single_val.s = tdrpStrDup("/tmp/spectra");
    tt++;
    
    // Parameter 'write_individual_spectra_files'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_individual_spectra_files");
    tt->descr = tdrpStrDup("Option to write individual spectral files.");
    tt->help = tdrpStrDup("If true, ASCII files with the spectra are written to the specified directory, for the selected region. A separate file is written for each spectrum.");
    tt->val_offset = (char *) &write_individual_spectra_files - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'write_combined_spectra_file'
    // ctype is 'tdrp_bool_t'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = BOOL_TYPE;
    tt->param_name = tdrpStrDup("write_combined_spectra_file");
    tt->descr = tdrpStrDup("Option to write combined spectra file.");
    tt->help = tdrpStrDup("If true, a single file is written, with one line per spectrum.");
    tt->val_offset = (char *) &write_combined_spectra_file - &_start_;
    tt->single_val.b = pFALSE;
    tt++;
    
    // Parameter 'min_snr_for_combined_spectra_file'
    // ctype is 'double'
    
    memset(tt, 0, sizeof(TDRPtable));
    tt->ptype = DOUBLE_TYPE;
    tt->param_name = tdrpStrDup("min_snr_for_combined_spectra_file");
    tt->descr = tdrpStrDup("Minimum SNR for writing combined spectra to file (dB).");
    tt->help = tdrpStrDup("The spectrum will only be added if the SNR exceeds this value.");
    tt->val_offset = (char *) &min_snr_for_combined_spectra_file - &_start_;
    tt->single_val.d = 10;
    tt++;
    
    // trailing entry has param_name set to NULL
    
    tt->param_name = NULL;
    
    return;
  
  }
